package ui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.util.Date;
import java.util.HashMap;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import logic.ClientLogic;

public class ChatWindow extends JFrame implements ChatWindowInterface{

	
	private JPanel textPanel;
	private TextArea chatDisplay;
	private JPanel inputPanel;
	private TextArea inputField;
	private JButton sendButton;
	private ClientLogic clientLogic;
	private JList<String> userList;
	private String currentUser;
	private final String title = "EasyChat";
	
	
	public ChatWindow(String s, ClientLogic clientLogic){
		super(s);
		this.clientLogic = clientLogic;
		this.getContentPane().setLayout(new BorderLayout());
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setSize(900, 600);
		
		
		inputPanel = new JPanel();
		inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.X_AXIS));
		
		textPanel = new JPanel();
		textPanel.setSize(300, 100);
		textPanel.setLayout(new BorderLayout());
		
		chatDisplay = new TextArea("Chat Display");
		chatDisplay.setEditable(false);
		chatDisplay.setPreferredSize(new Dimension(chatDisplay.getWidth(), (this.getHeight()*3/4)));


		userList = new JList<String>();
		userList.setPreferredSize(new Dimension(this.getWidth()/4, userList.getHeight()));
		JListRenderer renderer = new JListRenderer();
		userList.setCellRenderer(renderer);
		TitledBorder title = BorderFactory.createTitledBorder("Kontakte");
		userList.setBorder(title);
		userList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);		

		inputField = new TextArea("input field");
		inputField.requestFocus();
		inputField.addMouseListener(new MouseListener() {
			
			@Override
			public void mouseReleased(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mousePressed(MouseEvent arg0) {
				inputField.setText("");
				
			}
			
			@Override
			public void mouseExited(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseEntered(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void mouseClicked(MouseEvent arg0) {
				// TODO Auto-generated method stub
				
			}
		});
		
		inputField.addKeyListener(new KeyListener() {
			
			@Override
			public void keyTyped(KeyEvent arg0) {
				
			}
			
			@Override
			public void keyReleased(KeyEvent arg0) {
				
			}
			
			@Override
			public void keyPressed(KeyEvent arg0) {
				if(arg0.getKeyCode() == KeyEvent.VK_ENTER){
					sendToLogic();
				}
			}
		});
		userList.addListSelectionListener(new ListSelectionListener() {
			
			@Override
			public void valueChanged(ListSelectionEvent arg0) {	
				String oldUser = currentUser;
				JList<String> jList = (JList<String>) arg0.getSource();
				currentUser = jList.getSelectedValue();
	
				
				System.out.println("old user "+oldUser+" newUser "+currentUser);
				ChatWindow.this.clientLogic.changeCurrentChatPartner(oldUser, currentUser);
		
				
			}
		});
		
		sendButton = new JButton("senden");
		sendButton.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				sendToLogic();
			}
		});

		inputPanel.add(inputField);
		inputPanel.add(sendButton);
		textPanel.add(chatDisplay,BorderLayout.CENTER);
		textPanel.add(inputPanel, BorderLayout.SOUTH);
		this.add(textPanel, BorderLayout.CENTER);
		this.add(userList, BorderLayout.EAST);

		//always needs to be the last statement
		this.setVisible(true);
		
	}//constructor
	
	private void sendToLogic(){
		String feed = inputField.getText();
		clientLogic.sendMessage(feed, userList.getSelectedValue());
		//TODO macht aus irgendnem Grund trotzdem Absatz
		inputField.setText("");
	}
	
	public void closeFrame(){
		this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
	}


	public TextArea getChatDisplay() {
		return chatDisplay;
	}
	
	public TextArea getInputField() {
		return inputField;
	}
	
	public JList<String> getUserList(){
		return userList;
	}

	public String getCurrentChatPartner() {
		String result = userList.getSelectedValue();
		return result;
	}
	
	public void displayMessage(String message, String sender){
		if(sender != null){
			chatDisplay.append("\n" + sender + "\t" + (new Date()).toString()+"\n" + message + "\n");
		} else {
			chatDisplay.append("\n" + message + "\n");
		}
	}

	@Override
	public void updateOnlineUsers(HashMap<String, byte[]> nameImgMap) {
		String[] names = new String[nameImgMap.size()];
		//extracting the names from the map
		int i = 0;
		for(String s : nameImgMap.keySet()){
			names[i] = s;
			i++;
		}
		//save the name of the selected for later
		String selected = userList.getSelectedValue();
		//set the names to be displayed by the JList
		userList.setListData(names);
		//set the Renderes picture name map
		((JListRenderer)userList.getCellRenderer()).setPictures(nameImgMap);
		//set the selected one again
		userList.setSelectedValue(selected, true);
		
	}

	@Override
	public void setDisplayedText(String text) {
		chatDisplay.setText(text);	
	}

	@Override
	public String getDisplayedText() {
		return chatDisplay.getText();
	}

	@Override
	public void setVisible(Boolean b) {
		setVisible(true);
	}
	
	

//	public static void main(String args[]){
//		new ChatWindow("EasyChat");
//	}
}


